//------------------------------------------------
//--- 010 Editor v2.1.3 Binary Template
//
//      File: EMFPlus.bt
//   Authors: Gabor Seljan
//    E-mail: gabor@seljan.hu
//   Version: 0.1
//   Purpose: Enhanced Metafile Format Plus (EMFPLUS) template. 
//  Category: Image
// File Mask: *.emf
//  ID Bytes: 01 00 00 00
//   History:
//   0.1   2022-05-31 G Seljan: Initial version.
//
// References:
//   MS-EMFPLUS: Enhanced Metafile Format Plus Extensions 20, Microsoft
//------------------------------------------------

// Define structures used in EMF files

typedef enum <DWORD> {
  EMR_HEADER = 0x00000001,
  EMR_POLYBEZIER = 0x00000002,
  EMR_POLYGON = 0x00000003,
  EMR_POLYLINE = 0x00000004,
  EMR_POLYBEZIERTO = 0x00000005,
  EMR_POLYLINETO = 0x00000006,
  EMR_POLYPOLYLINE = 0x00000007,
  EMR_POLYPOLYGON = 0x00000008,
  EMR_SETWINDOWEXTEX = 0x00000009,
  EMR_SETWINDOWORGEX = 0x0000000A,
  EMR_SETVIEWPORTEXTEX = 0x0000000B,
  EMR_SETVIEWPORTORGEX = 0x0000000C,
  EMR_SETBRUSHORGEX = 0x0000000D,
  EMR_EOF = 0x0000000E,
  EMR_SETPIXELV = 0x0000000F,
  EMR_SETMAPPERFLAGS = 0x00000010,
  EMR_SETMAPMODE = 0x00000011,
  EMR_SETBKMODE = 0x00000012,
  EMR_SETPOLYFILLMODE = 0x00000013,
  EMR_SETROP2 = 0x00000014,
  EMR_SETSTRETCHBLTMODE = 0x00000015,
  EMR_SETTEXTALIGN = 0x00000016,
  EMR_SETCOLORADJUSTMENT = 0x00000017,
  EMR_SETTEXTCOLOR = 0x00000018,
  EMR_SETBKCOLOR = 0x00000019,
  EMR_OFFSETCLIPRGN = 0x0000001A,
  EMR_MOVETOEX = 0x0000001B,
  EMR_SETMETARGN = 0x0000001C,
  EMR_EXCLUDECLIPRECT = 0x0000001D,
  EMR_INTERSECTCLIPRECT = 0x0000001E,
  EMR_SCALEVIEWPORTEXTEX = 0x0000001F,
  EMR_SCALEWINDOWEXTEX = 0x00000020,
  EMR_SAVEDC = 0x00000021,
  EMR_RESTOREDC = 0x00000022,
  EMR_SETWORLDTRANSFORM = 0x00000023,
  EMR_MODIFYWORLDTRANSFORM = 0x00000024,
  EMR_SELECTOBJECT = 0x00000025,
  EMR_CREATEPEN = 0x00000026,
  EMR_CREATEBRUSHINDIRECT = 0x00000027,
  EMR_DELETEOBJECT = 0x00000028,
  EMR_ANGLEARC = 0x00000029,
  EMR_ELLIPSE = 0x0000002A,
  EMR_RECTANGLE = 0x0000002B,
  EMR_ROUNDRECT = 0x0000002C,
  EMR_ARC = 0x0000002D,
  EMR_CHORD = 0x0000002E,
  EMR_PIE = 0x0000002F,
  EMR_SELECTPALETTE = 0x00000030,
  EMR_CREATEPALETTE = 0x00000031,
  EMR_SETPALETTEENTRIES = 0x00000032,
  EMR_RESIZEPALETTE = 0x00000033,
  EMR_REALIZEPALETTE = 0x00000034,
  EMR_EXTFLOODFILL = 0x00000035,
  EMR_LINETO = 0x00000036,
  EMR_ARCTO = 0x00000037,
  EMR_POLYDRAW = 0x00000038,
  EMR_SETARCDIRECTION = 0x00000039,
  EMR_SETMITERLIMIT = 0x0000003A,
  EMR_BEGINPATH = 0x0000003B,
  EMR_ENDPATH = 0x0000003C,
  EMR_CLOSEFIGURE = 0x0000003D,
  EMR_FILLPATH = 0x0000003E,
  EMR_STROKEANDFILLPATH = 0x0000003F,
  EMR_STROKEPATH = 0x00000040,
  EMR_FLATTENPATH = 0x00000041,
  EMR_WIDENPATH = 0x00000042,
  EMR_SELECTCLIPPATH = 0x00000043,
  EMR_ABORTPATH = 0x00000044,
  EMR_RESERVED_69 = 0x00000045,
  EMR_COMMENT = 0x00000046,
  EMR_FILLRGN = 0x00000047,
  EMR_FRAMERGN = 0x00000048,
  EMR_INVERTRGN = 0x00000049,
  EMR_PAINTRGN = 0x0000004A,
  EMR_EXTSELECTCLIPRGN = 0x0000004B,
  EMR_BITBLT = 0x0000004C,
  EMR_STRETCHBLT = 0x0000004D,
  EMR_MASKBLT = 0x0000004E,
  EMR_PLGBLT = 0x0000004F,
  EMR_SETDIBITSTODEVICE = 0x00000050,
  EMR_STRETCHDIBITS = 0x00000051,
  EMR_EXTCREATEFONTINDIRECTW = 0x00000052,
  EMR_EXTTEXTOUTA = 0x00000053,
  EMR_EXTTEXTOUTW = 0x00000054,
  EMR_POLYBEZIER16 = 0x00000055,
  EMR_POLYGON16 = 0x00000056,
  EMR_POLYLINE16 = 0x00000057,
  EMR_POLYBEZIERTO16 = 0x00000058,
  EMR_POLYLINETO16 = 0x00000059,
  EMR_POLYPOLYLINE16 = 0x0000005A,
  EMR_POLYPOLYGON16 = 0x0000005B,
  EMR_POLYDRAW16 = 0x0000005C,
  EMR_CREATEMONOBRUSH = 0x0000005D,
  EMR_CREATEDIBPATTERNBRUSHPT = 0x0000005E,
  EMR_EXTCREATEPEN = 0x0000005F,
  EMR_POLYTEXTOUTA = 0x00000060,
  EMR_POLYTEXTOUTW = 0x00000061,
  EMR_SETICMMODE = 0x00000062,
  EMR_CREATECOLORSPACE = 0x00000063,
  EMR_SETCOLORSPACE = 0x00000064,
  EMR_DELETECOLORSPACE = 0x00000065,
  EMR_GLSRECORD = 0x00000066,
  EMR_GLSBOUNDEDRECORD = 0x00000067,
  EMR_PIXELFORMAT = 0x00000068,
  EMR_DRAWESCAPE = 0x00000069,
  EMR_EXTESCAPE = 0x0000006A,
  EMR_RESERVED_107 = 0x0000006B,
  EMR_SMALLTEXTOUT = 0x0000006C,
  EMR_FORCEUFIMAPPING = 0x0000006D,
  EMR_NAMEDESCAPE = 0x0000006E,
  EMR_COLORCORRECTPALETTE = 0x0000006F,
  EMR_SETICMPROFILEA = 0x00000070,
  EMR_SETICMPROFILEW = 0x00000071,
  EMR_ALPHABLEND = 0x00000072,
  EMR_SETLAYOUT = 0x00000073,
  EMR_TRANSPARENTBLT = 0x00000074,
  EMR_RESERVED_117 = 0x00000075,
  EMR_GRADIENTFILL = 0x00000076,
  EMR_SETLINKEDUFIS = 0x00000077,
  EMR_SETTEXTJUSTIFICATION = 0x00000078,
  EMR_COLORMATCHTOTARGETW = 0x00000079,
  EMR_CREATECOLORSPACEW = 0x0000007A
} RecordType;

typedef enum <DWORD> {
  NEWFRAME = 0x00000001,
  ABORTDOC = 0x00000002,
  NEXTBAND = 0x00000003,
  SETCOLORTABLE = 0x00000004,
  GETCOLORTABLE = 0x00000005,
  FLUSHOUT = 0x00000006,
  DRAFTMODE = 0x00000007,
  QUERYESCSUPPORT = 0x00000008,
  SETABORTPROC = 0x00000009,
  STARTDOC = 0x0000000A,
  ENDDOC = 0x0000000B,
  GETPHYSPAGESIZE = 0x0000000C,
  GETPRINTINGOFFSET = 0x0000000D,
  GETSCALINGFACTOR = 0x0000000E,
  META_ESCAPE_ENHANCED_METAFILE = 0x0000000F,
  SETPENWIDTH = 0x00000010,
  SETCOPYCOUNT = 0x00000011,
  SETPAPERSOURCE = 0x00000012,
  PASSTHROUGH = 0x00000013,
  GETTECHNOLOGY = 0x00000014,
  SETLINECAP = 0x00000015,
  SETLINEJOIN = 0x00000016,
  SETMITERLIMIT = 0x00000017,
  BANDINFO = 0x00000018,
  DRAWPATTERNRECT = 0x00000019,
  GETVECTORPENSIZE = 0x0000001A,
  GETVECTORBRUSHSIZE = 0x0000001B,
  ENABLEDUPLEX = 0x0000001C,
  GETSETPAPERBINS = 0x0000001D,
  GETSETPRINTORIENT = 0x0000001E,
  ENUMPAPERBINS = 0x0000001F,
  SETDIBSCALING = 0x00000020,
  EPSPRINTING = 0x00000021,
  ENUMPAPERMETRICS = 0x00000022,
  GETSETPAPERMETRICS = 0x00000023,
  POSTSCRIPT_DATA = 0x00000025,
  POSTSCRIPT_IGNORE = 0x00000026,
  GETDEVICEUNITS = 0x0000002A,
  GETEXTENDEDTEXTMETRICS = 0x00000100,
  GETPAIRKERNTABLE = 0x00000102,
  EXTTEXTOUT = 0x00000200,
  GETFACENAME = 0x00000201,
  DOWNLOADFACE = 0x00000202,
  METAFILE_DRIVER = 0x00000801,
  QUERYDIBSUPPORT = 0x00000C01,
  BEGIN_PATH = 0x00001000,
  CLIP_TO_PATH = 0x00001001,
  END_PATH = 0x00001002,
  OPENCHANNEL = 0x0000100E,
  DOWNLOADHEADER = 0x0000100F,
  CLOSECHANNEL = 0x00001010,
  POSTSCRIPT_PASSTHROUGH = 0x00001013,
  ENCAPSULATED_POSTSCRIPT = 0x00001014,
  POSTSCRIPT_IDENTIFY = 0x00001015,
  POSTSCRIPT_INJECTION = 0x00001016,
  CHECKJPEGFORMAT = 0x00001017,
  CHECKPNGFORMAT = 0x00001018,
  GET_PS_FEATURESETTING = 0x00001019,
  MXDC_ESCAPE = 0x0000101A,
  SPCLPASSTHROUGH2 = 0x000011D8
} MetafileEscapes;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-wmf/4e588f70-bd92-4a6f-b77f-35d0feaf7a57
typedef enum <DWORD> {
  BI_RGB = 0x00000000,
  BI_RLE8 = 0x00000001,
  BI_RLE4 = 0x00000002,
  BI_BITFIELDS = 0x00000003,
  BI_JPEG = 0x00000004,
  BI_PNG = 0x00000005,
  BI_CMYK = 0x0000000B,
  BI_CMYKRLE8 = 0x0000000C,
  BI_CMYKRLE4 = 0x0000000D
} Compression;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-wmf/792153f4-1e99-4ec8-93cf-d171a5f33903
typedef enum <WORD> {
  //BI_BITCOUNT_0 = 0x0000,
  BI_BITCOUNT_1 = 0x0001, // Bitmap is monochrome.
  BI_BITCOUNT_2 = 0x0004, // Bitmap has a maximum of 16 colors.
  BI_BITCOUNT_3 = 0x0008, // Bitmap has a maximum of 256 colors.
  BI_BITCOUNT_4 = 0x0010, // Bitmap has a maximum of 2^16 colors.
  BI_BITCOUNT_5 = 0x0018, // Bitmap has a maximum of 2^24 colors.
  BI_BITCOUNT_6 = 0x0020  // Bitmap has a maximum of 2^32 colors.
 } BitCount;

 // https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-wmf/38e6de43-2cfe-428e-874e-391dbf74570c
typedef enum <DWORD> {
  BS_SOLID   = 0x00000000,
  BS_NULL    = 0x00000001,
  BS_HATCHED = 0x00000002,
 } BrushStyle;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/a5e722e3-891a-4a67-be1a-ed5a48a7fda1
typedef enum <DWORD> {
  DIB_RGB_COLORS  = 0x00000000,
  DIB_PAL_COLORS  = 0x00000001,
  DIB_PAL_INDICES = 0x00000002
} DIBColors;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-wmf/eb4bbd50-b3ce-4917-895c-be31f214797f
typedef enum <DWORD> {
  LCS_CALIBRATED_RGB = 0x00000000,
  LCS_sRGB = 0x73524742,
  LCS_WINDOWS_COLOR_SPACE = 0x57696E20
} LogicalColorSpace;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-wmf/9fec0834-607d-427d-abd5-ab240fb0db38
typedef enum <DWORD> {
  LCS_GM_ABS_COLORIMETRIC = 0x00000008,
  LCS_GM_BUSINESS = 0x00000001,
  LCS_GM_GRAPHICS = 0x00000002,
  LCS_GM_IMAGES = 0x00000004
} GamutMappingIntent;

// https://docs.microsoft.com/en-us/windows/win32/api/wingdi/ns-wingdi-ciexyz
typedef struct tagCIEXYZ {
  LONG ciexyzX;
  LONG ciexyzY;
  LONG ciexyzZ;
} CIEXYZ;

// https://docs.microsoft.com/en-us/windows/win32/api/wingdi/ns-wingdi-ciexyztriple
typedef struct tagICEXYZTRIPLE {
  CIEXYZ ciexyzRed;
  CIEXYZ ciexyzGreen;
  CIEXYZ ciexyzBlue;
} CIEXYZTRIPLE;

 // https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-wmf/0fdf54fc-6357-4cdd-b27f-795dee14cf86
typedef struct {
  UBYTE	Red;
  UBYTE Green;
  UBYTE Blue;
  UBYTE Reserved = { 0x00 };
} COLORREF;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/6d790f8d-5165-4746-bac3-3443915c2071
typedef struct {
  BrushStyle lbStyle;
  COLORREF lbColor;
  DWORD lbHatch;
} LogBrushEx;

// https://docs.microsoft.com/en-us/windows/win32/api/wingdi/ns-wingdi-paletteentry
typedef struct tagPALETTEENTRY {
  uchar	Reserved;
  uchar	Blue;
  uchar	Green;
  uchar	Red;
} PALETTEENTRY;

// https://docs.microsoft.com/en-us/windows/win32/api/wingdi/ns-wingdi-xform
typedef struct tagXFORM {
  FLOAT eM11;
  FLOAT eM12;
  FLOAT eM21;
  FLOAT eM22;
  FLOAT eDx;
  FLOAT eDy;
} XFORM;

// https://docs.microsoft.com/en-us/previous-versions/bb401793(v=msdn.10)
typedef struct tagSIZEL {
  LONG cx;
  LONG cy;
} SIZEL;

// https://docs.microsoft.com/en-us/previous-versions/ms931125(v=msdn.10)
typedef struct tagRECT { 
  LONG left = { 20 };
  LONG top = { 30 };
  LONG right = { 180 };
  LONG bottom = { 230 };
} RECTL;

// https://docs.microsoft.com/en-us/windows/win32/api/windef/ns-windef-point
typedef struct tagPOINT {
  LONG x;
  LONG y;
} POINT;

// https://docs.microsoft.com/en-us/windows/win32/api/wingdi/ns-wingdi-blendfunction
typedef struct _BLENDFUNCTION {
  BYTE BlendOp = { 0x0 };
  BYTE BlendFlags = { 0x0 };
  BYTE SourceConstantAlpha;
  BYTE AlphaFormat = { 0x0, 0x1 };
} BLENDFUNCTION;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/33578509-8349-46b6-8f8f-107c3f70bace
typedef struct _TRIVERTEX {
  LONG x;
  LONG y;
  WORD Red;
  WORD Green;
  WORD Blue;
  WORD Alpha;
} TRIVERTEX;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/93ba94f7-84fc-4dd5-8c94-3d476aa7588b
typedef struct _GRADIENT_RECT {
  ULONG UpperLeft;
  ULONG LowerRight;
} GRADIENT_RECT;

// https://docs.microsoft.com/en-us/windows/win32/api/wingdi/ns-wingdi-logcolorspacea
typedef struct tagLOGCOLORSPACEA {
  DWORD lcsSignature;
  DWORD lcsVersion;
  DWORD lcsSize;
  LogicalColorSpace lcsCSType;
  GamutMappingIntent lcsIntent;
  CIEXYZTRIPLE lcsEndpoints;
  DWORD lcsGammaRed;
  DWORD lcsGammaGreen;
  DWORD lcsGammaBlue;
  CHAR lcsFilename[8];
} LOGCOLORSPACEA;

// https://docs.microsoft.com/en-us/previous-versions/ms911013(v=msdn.10)
typedef struct tagRGBQUAD {
  UBYTE   rgbBlue;
  UBYTE   rgbGreen;
  UBYTE   rgbRed;
  UBYTE   rgbReserved = { 0 };
} RGBQUAD <read=ReadRGBQUAD>;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/00cc8ab4-ea2e-4bb1-9569-1201af47a0c8
typedef struct {
  DWORD cbPixelFormat;
  DWORD offPixelFormat;
  DWORD bOpenGL = { {0}, {1} };
} HeaderExtension1; // Size is 0x64

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/9e96e5cf-e949-49ae-baa8-3fffd948e588
typedef struct {
  DWORD MicrometersX;
  DWORD MicrometersY;
} HeaderExtension2; // Size is 0x6c

//---------------------------------------------
// Custom read functions for color types - this allows the
// color to be displayed without having to open up the structure.

string ReadRGBQUAD( RGBQUAD &a ) {
  string s;
  SPrintf( s, "#%02X%02X%02X%02X", a.rgbReserved, a.rgbRed, a.rgbGreen, a.rgbBlue );
  return s;
}

uint SetSize( uint emrSize, uint bmiSize, uint biBitCount, uint biCompression ) {
  local uint nSize = 0;

  if (biBitCount == BI_BITCOUNT_1) {      // 0x1
    nSize = emrSize + bmiSize + (uint)0x4 * (uint)0x2;
  }
  else if (biBitCount == BI_BITCOUNT_2) { // 0x4
    nSize = emrSize + bmiSize + (uint)0x4 * (uint)0x10;
  }
  else if (biBitCount == BI_BITCOUNT_3) { // 0x8
    nSize = emrSize + bmiSize + (uint)0x4 * (uint)0x100;
  }
  else if (biBitCount == BI_BITCOUNT_4) { // 0x10
    nSize = emrSize + bmiSize + (uint)0x4 * (uint)0x1;
  }
  else if (biBitCount == BI_BITCOUNT_5) { // 0x18
    nSize = emrSize + bmiSize + (uint)0x4 * (uint)0x1;
  }
  else if (biBitCount == BI_BITCOUNT_6) { // 0x20
    if (biCompression == BI_RGB) {
      nSize = emrSize + bmiSize + (uint)0x4 * (uint)0x1;
    }
    else if (biCompression == BI_BITFIELDS) {
      nSize = emrSize + bmiSize + (uint)0x4 * (uint)0x3;
    }
  }

  if (nSize %4 !=0 ) {
    Warning( "Record size is invalid. Template stopped." );
    return -1;
  }

  return nSize;
}

uint SetEmfPlusSize( uint commentSize, uint dataSize ) {
  local uint nSize = 0;

  nSize = commentSize + dataSize;

  if (nSize %4 !=0 ) {
    Warning( "Record size is invalid. Template stopped." );
    return -1;
  }

  return nSize;
}

// https://docs.microsoft.com/en-us/previous-versions//dd183376(v=vs.85)
typedef struct tagBITMAPINFOHEADER {
  DWORD biSize = { 0x00000028 }; // Number of bytes required by the structure.
  LONG  biWidth <min=1>;         // Width of the bitmap, in pixels.
  LONG  biHeight <min=1>;        // Height of the bitmap, in pixels.
  WORD  biPlanes = { 1 };        // Number of planes for the target device.
  BitCount biBitCount;           // Number of bits-per-pixel.

  if (biBitCount == BI_BITCOUNT_1) {       // 0x01
    DWORD biCompression = { BI_RGB };
  } else if(biBitCount == BI_BITCOUNT_2) { // 0x04
    DWORD biCompression = { BI_RLE4 };
  } else if(biBitCount == BI_BITCOUNT_3) { // 0x08
    DWORD biCompression = { BI_RLE8 };
  } else if(biBitCount == BI_BITCOUNT_4) { // 0x10
    DWORD biCompression = { BI_BITFIELDS };
  } else if(biBitCount == BI_BITCOUNT_5) { // 0x18
    DWORD biCompression = { BI_RGB };
  } else if(biBitCount == BI_BITCOUNT_6) { // 0x20
    DWORD biCompression = { BI_RGB };
  }

  // Size, in bytes, of the image.
  if (biCompression == BI_RGB) { 
    DWORD biSizeImage = { 0 }; // May be set to zero for BI_RGB bitmaps.
  } else {	
    DWORD biSizeImage;
  }

  LONG biXPelsPerMeter; // Horizontal resolution, in pixels-per-meter, of the target device for the bitmap.
  LONG biYPelsPerMeter; // Vertical resolution, in pixels-per-meter, of the target device for the bitmap.

  // The number of color indexes in the color table that are actually used by the bitmap. 
  switch(biBitCount) {
    case 8:
      DWORD biClrUsed <max=256>;
      break;

    case 4:
      DWORD biClrUsed = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 };
      break;
  
    case 2:
      DWORD biClrUsed = { 0, 1, 2, 3, 4 };
      break;

    case 1:
      DWORD biClrUsed = { 0, 1, 2 };
      break;

    default:
      DWORD biClrUsed = { 0 };
  }

  DWORD biClrImportant = { 0 }; // The number of color indexes that are required for displaying the bitmap. If this value is zero, all colors are required.
} BITMAPINFOHEADER;

// https://msdn.microsoft.com/en-us/library/windows/desktop/dd183376(v=vs.85).aspx
typedef struct tagBITMAPINFO {
  BITMAPINFOHEADER bmiHeader;

  if (bmiHeader.biBitCount == BI_BITCOUNT_1) {        // 0x1
    RGBQUAD bmiColors[2];
  } else if (bmiHeader.biBitCount == BI_BITCOUNT_2) { // 0x4
    RGBQUAD bmiColors[16];
  } else if (bmiHeader.biBitCount == BI_BITCOUNT_3) { // 0x8
    RGBQUAD bmiColors[256];
  } else if (bmiHeader.biBitCount == BI_BITCOUNT_4) { // 0x10
    RGBQUAD bmiColors[1];
  } else if (bmiHeader.biBitCount == BI_BITCOUNT_5) { // 0x18
    RGBQUAD bmiColors[1];
  } else if (bmiHeader.biBitCount == BI_BITCOUNT_6) { // 0x20
    if (bmiHeader.biCompression == BI_RGB) {
      RGBQUAD bmiColors[1];
    } else if (bmiHeader.biCompression == BI_BITFIELDS) {
      RGBQUAD bmiColors[3];
    }
  }

} BITMAPINFO;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/e4a35c41-e8e3-43f9-bc07-a18e99bb866d
typedef struct {
  DWORD iType = { 0x00000001 };                        // Record type EMR_HEADER.
  DWORD nSize;                                         // Record size in bytes.
  RECTL rclBounds;                                     // Inclusive-inclusive bounds in device units.
  RECTL rclFrame;                                      // Inclusive-inclusive picture frame of metafile in .01 mm units.
  DWORD dSignature = { 0x464D4520 };                   // EMF
  DWORD nVersion = { 0x00010000 };
  DWORD nBytes;                                        // Size of the metafile in bytes.
  DWORD nRecords <min=5, max=5>;                       // Number of records in the metafile.
  WORD  nHandles;                                      // Number of handles in the handle table.
  WORD  sReserved = { 0 };
  DWORD nDescription = { 0, 4, 8, 12, 16 };            // Number of chars in the unicode description string.
  DWORD offDescription = { 0x0000006c };               // Offset to the metafile description record.
  DWORD nPalEntries = { 0 };                           // Number of entries in the metafile palette.
  SIZEL szlDevice = { {0x00000780, 0x00000780} };      // Size of the reference device in pixels.
  SIZEL szlMillimeters = { {0x000002A5, 0x000001A7} }; // Size of the reference device in millimeters.
  HeaderExtension1 EmfHeaderExtension1;
  HeaderExtension2 EmfHeaderExtension2;
} EMRHEADER;

typedef struct {
  WORD desc[EmfHeader.nDescription];
} EMRDESCRIPTION;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/3f47fde0-0e6b-40c1-87f3-f4129af03aa1
typedef struct {
  DWORD iType = { 0x0000000E };    // Record type is EMR_EOF.
  DWORD	nSize = { 0x00000014 };    // Record size in bytes.
  DWORD nPalEntries = { 0 };       // Number of palette entries.
  DWORD offPalEntries = { 0 };     // Offset to the palette entries from the start of this record.

  local uint palCnt = 0;
  for ( palCnt = 0; palCnt < nPalEntries; palCnt++ ) {
    PALETTEENTRY palEntry;         // PaletteEntry objects that specifies the palette data.
  }

  DWORD SizeLast = { 0x00000014 }; // MUST be the same as Size and MUST be the last field of the record and hence the metafile.
} EMREOF;

//------------------------------------------------
// 1. Clipping Record Types
//------------------------------------------------


//------------------------------------------------
// 2. Comment Record Types
//------------------------------------------------

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/929b78e1-b848-44a5-9fac-327cae5c2ae5
/*typedef struct tagEMRCOMMENTEMFPLUS {
  DWORD iType = { 0x00000046 };
  DWORD nSize;
  DWORD DataSize;
  DWORD CommentIdentifier = { 0x2B464D45 };
} EMRCOMMENTEMFPLUS;
*/


//------------------------------------------------
// 3. Control Record Types
//------------------------------------------------

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emfplus/fa7c00e7-ef14-4070-b12a-cb047d964ebe
typedef struct tagEMFPLUSHEADER {
  local uint _cSize     = 0x00000010;
  local uint _cDataSize = 0x00000004;
  local uint _rSize     = 0x0000001c;
  local uint _rDataSize = 0x00000010;

  local uint start = FTell();
  FSeek(start);

  // Add EMR_COMMENT_EMFPLUS record.
  DWORD cType = { 0x00000046 };
  DWORD cSize = { _cSize };
  DWORD cDataSize = { _cDataSize };
  DWORD cIdentifier = { 0x2B464D45 };

  WORD Type = { 0x4001 };
  WORD Flags = { 0x0001 };
  DWORD Size = { _rSize };
  DWORD DataSize = { _rDataSize };
  DWORD Version = { 0xDBC01002 };
  DWORD EmfPlusFlags;
  DWORD LogicalDpiX;
  DWORD LogicalDpiY;

  // Fix Size and DataSize fields in Add EMR_COMMENT_EMFPLUS record.
  local uint end = FTell();
  FSeek(start + 4);
  DWORD	cSize = { SetEmfPlusSize(_cSize, _rSize) };
  DWORD	cDataSize = { SetEmfPlusSize(_cDataSize, _rSize) };
  FSeek(end);

} EMFPLUSHEADER;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emfplus/d2ba1822-cc1f-413e-bd5b-91c094241da5
typedef struct tagEMFPLUSEOF {
  local uint _cSize     = 0x00000010;
  local uint _cDataSize = 0x00000004;
  local uint _rSize     = 0x0000000c;
  local uint _rDataSize = 0x00000000;

  local uint start = FTell();
  FSeek(start);

  // Add EMR_COMMENT_EMFPLUS record.
  DWORD cType = { 0x00000046 };
  DWORD cSize = { _cSize };
  DWORD cDataSize = { _cDataSize };
  DWORD cIdentifier = { 0x2B464D45 };

  WORD  Type = { 0x4002 };
  WORD  Flags = { 0x0000 };
  DWORD Size = { _rSize };
  DWORD DataSize = { _rDataSize };

  // Fix Size and DataSize fields in Add EMR_COMMENT_EMFPLUS record.
  local uint end = FTell();
  FSeek(start + 4);
  DWORD	cSize = { SetEmfPlusSize(_cSize, _rSize) };
  DWORD	cDataSize = { SetEmfPlusSize(_cDataSize, _rSize) };
  FSeek(end);

} EMFPLUSEOF;

//------------------------------------------------
// 4. Drawing Record Types
//------------------------------------------------

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emfplus/38dc4973-cae8-406e-89f3-7536e2139def
typedef struct tagEmfPlusClear {
  local uint _cSize = 0x00000010;
  local uint _cDataSize = 0x00000004;
  local uint _rSize = 0x00000010;
  local uint _rDataSize = 0x00000004;

  local uint start = FTell();
  FSeek(start);

  // Add EMR_COMMENT_EMFPLUS record.
  DWORD cType = { 0x00000046 };
  DWORD cSize = { _cSize };
  DWORD cDataSize = { _cDataSize };
  DWORD cIdentifier = { 0x2B464D45 };

  WORD Type = { 0x4009 };
  WORD Flags = { 0x0000 };
  DWORD Size = { _rSize };
  DWORD DataSize = { _rDataSize };
  COLORREF Color;

  // Fix Size and DataSize fields in Add EMR_COMMENT_EMFPLUS record.
  local uint end = FTell();
  FSeek(start + 4);
  DWORD	cSize = { SetEmfPlusSize(_cSize, _rSize) };
  DWORD	cDataSize = { SetEmfPlusSize(_cDataSize, _rSize) };
  FSeek(end);

} EmfPlusClear;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emfplus/2addbcb6-0baf-4794-a733-048cb7a3e1e4
typedef struct tagEmfPlusRect {
  WORD X;
  WORD Y;
  WORD Width;
  WORD Height;
} EmfPlusRect;

typedef struct tagEmfPlusFillRects {
  local uint _cSize     = 0x00000010;
  local uint _cDataSize = 0x00000004;
  local uint _rSize     = 0x00000024;
  local uint _rDataSize = 0x00000018;

  local uint start = FTell();
  FSeek(start);

  // Add EMR_COMMENT_EMFPLUS record.
  DWORD cType       = { 0x00000046 };
  DWORD cSize       = { _cSize      };
  DWORD cDataSize   = { _cDataSize  };
  DWORD cIdentifier = { 0x2B464D45 };

  WORD Type         = { 0x400A     };
  WORD Flags;
  DWORD Size        = { _rSize     };
  DWORD DataSize    = { _rDataSize };
  DWORD BrushID;
  DWORD Count       = { 0x00000001 };
  EmfPlusRect RectData[1];

  // Fix Size and DataSize fields in the EMR_COMMENT_EMFPLUS record.
  local uint end = FTell();
  FSeek(start + 4);
  DWORD	cSize = { SetEmfPlusSize(_cSize, _rSize) };
  DWORD	cDataSize = { SetEmfPlusSize(_cDataSize, _rSize) };
  FSeek(end);

} EmfPlusFillRects;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emfplus/b794b780-e9a8-4682-af65-9b614aecfbe6
typedef struct tagEmfPlusDrawDriverString {
  local uint _rGlyphCount = 1;

  local uint _cSize       = 0x00000010;
  local uint _cDataSize   = 0x00000004;
  local uint _rSize       = (_rGlyphCount * 0x0000000A) + 0x0000001C;
  local uint _rDataSize   = (_rGlyphCount * 0x0000000A) + 0x00000010;

  local uint start = FTell();
  FSeek(start);

  // Add EMR_COMMENT_EMFPLUS record.
  DWORD cType       = { 0x00000046 };
  DWORD cSize       = { _cSize      };
  DWORD cDataSize   = { _cDataSize  };
  DWORD cIdentifier = { 0x2B464D45 };

  WORD Type         = { 0x4036     };
  WORD Flags;
  DWORD Size        = { _rSize     };
  DWORD DataSize    = { _rDataSize };
  DWORD BrushId;
  DWORD DriverStringOptionsFlags;
  DWORD MatrixPresent;
  DWORD GlyphCount  = { _rGlyphCount };
  DWORD Glyphs[_rGlyphCount];

  // Fix Size and DataSize fields in the EMR_COMMENT_EMFPLUS record.
  local uint end = FTell();
  FSeek(start + 4);
  DWORD	cSize = { SetEmfPlusSize(_cSize, _rSize) };
  DWORD	cDataSize = { SetEmfPlusSize(_cDataSize, _rSize) };
  FSeek(end);

} EmfPlusDrawDriverString;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emfplus/65ddf0d3-ae37-4da6-9a89-251ded97f1ad
typedef struct tagEmfPlusPointF {
  DWORD X;
  DWORD Y;
} EmfPlusPointF;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emfplus/a5c0bc88-ab0e-4126-b68f-47b04bfc5cad
typedef struct tagEmfPlusDrawLines {
  local uint _rCount = 1;

  local uint _cSize       = 0x00000010;
  local uint _cDataSize   = 0x00000004;
  local uint _rSize       = (_rCount * 0x00000008) + 0x00000010;
  local uint _rDataSize   = (_rCount * 0x00000008) + 0x00000004;

  local uint start = FTell();
  FSeek(start);

  // Add EMR_COMMENT_EMFPLUS record.
  DWORD cType       = { 0x00000046 };
  DWORD cSize       = { _cSize      };
  DWORD cDataSize   = { _cDataSize  };
  DWORD cIdentifier = { 0x2B464D45 };

  WORD Type         = { 0x400d     };
  WORD Flags;
  DWORD Size        = { _rSize     };
  DWORD DataSize    = { _rDataSize };
  DWORD Count       = { _rCount    };
  EmfPlusPointF Points[ _rCount    ];

  // Fix Size and DataSize fields in the EMR_COMMENT_EMFPLUS record.
  local uint end = FTell();
  FSeek(start + 4);
  DWORD	cSize = { SetEmfPlusSize(_cSize, _rSize) };
  DWORD	cDataSize = { SetEmfPlusSize(_cDataSize, _rSize) };
  FSeek(end);

} EmfPlusDrawLines;

//------------------------------------------------
// 5. Object Record Types
//------------------------------------------------

typedef struct tagGUID {
  DWORD Data1;
  WORD  Data2;
  WORD  Data3;
  QWORD Data4;
} GUID;

typedef struct tagEmfPlusSerializableObject {
  local uint _cSize     = 0x00000010;
  local uint _cDataSize = 0x00000004;
  local uint _rSize     = 0x00000028;
  local uint _rDataSize = 0x0000001c;

  local uint start = FTell();
  FSeek(start);

  // Add EMR_COMMENT_EMFPLUS record.
  //EMRCOMMENTEMFPLUS CommentPlus;
  DWORD cType = { 0x00000046 };
  DWORD cSize = { _cSize };
  DWORD cDataSize = { _cDataSize };
  DWORD cIdentifier = { 0x2B464D45 };

  WORD Type = { 0x4038 };
  WORD Flags;
  DWORD Size = { _rSize };
  DWORD DataSize = { _rDataSize };
  GUID ObjectGUID;
  DWORD BufferSize = { 0x00000008 };
  BYTE Buffer[8];

  // Fix Size and DataSize fields in Add EMR_COMMENT_EMFPLUS record.
  local uint end = FTell();
  FSeek(start + 4);
  DWORD	cSize = { SetEmfPlusSize(_cSize, _rSize) };
  DWORD	cDataSize = { SetEmfPlusSize(_cDataSize, _rSize) };
  FSeek(end);

} EmfPlusSerializableObject;

//------------------------------------------------
// 6. Property Record Types
//------------------------------------------------

//------------------------------------------------
// 7. State Record Types
//------------------------------------------------

//------------------------------------------------
// 8. Terminal Server Record Types
//------------------------------------------------

typedef struct tagEmfPlusSetTSClip {
  local uint _cSize = 0x00000010;
  local uint _cDataSize = 0x00000004;
  local uint _rSize = 0x00000014;
  local uint _rDataSize = 0x00000008;

  local uint start = FTell();
  FSeek(start);

  // Add EMR_COMMENT_EMFPLUS record.
  //EMRCOMMENTEMFPLUS CommentPlus;
  DWORD cType = { 0x00000046 };
  DWORD cSize = { _cSize };
  DWORD cDataSize = { _cDataSize };
  DWORD cIdentifier = { 0x2B464D45 };

  WORD Type = { 0x403a };
  WORD Flags = { 0x0001 };
  DWORD Size = { _rSize };
  DWORD DataSize = { _rDataSize };
  EmfPlusRect Rects[1];

  // Fix Size and DataSize fields in Add EMR_COMMENT_EMFPLUS record.
  local uint end = FTell();
  FSeek(start + 4);
  DWORD	cSize = { SetEmfPlusSize(_cSize, _rSize) };
  DWORD	cDataSize = { SetEmfPlusSize(_cDataSize, _rSize) };
  FSeek(end);

} EmfPlusSetTSClip;

//------------------------------------------------
// 9. Transform Record Types
//------------------------------------------------


// EMF records

//------------------------------------------------
// 1. Bitmap Record Types
//------------------------------------------------

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/89c0d808-0dea-413f-be40-2e9e51fa36ac
typedef struct tagEMRSTRETCHDIBITS {
  local uint emrSize = 0x00000050;
  local uint bmiSize = 0x00000028;
  local uint start = FTell();
  FSeek(start);

  DWORD iType = { 0x00000051 };
  DWORD	nSize = { emrSize };
  RECTL rclBounds;
  DWORD xDest;
  DWORD yDest;
  DWORD xSrc;
  DWORD ySrc;
  DWORD cxSrc;
  DWORD cySrc;
  DWORD offBmiSrc = { emrSize };
  DWORD cbBmiSrc;
  DWORD offBitsSrc;
  DWORD cbBitsSrc;
  DIBColors iUsageSrc;
  DWORD dwRop;
  DWORD cxDest;
  DWORD cyDest;
  BITMAPINFO bmi;

  // Fix nSize member of EMR_STRETCHDIBITS structure.
  local uint end = FTell();
  FSeek(start+4);
  DWORD	nSize = { SetSize(emrSize, bmiSize, bmi.bmiHeader.biBitCount, bmi.bmiHeader.biCompression) };
  FSeek(end);

} EMRSTRETCHDIBITS;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/347d1c44-1847-47ec-8762-7059e9e9b185
typedef struct tagEMRBITBLT {
  local uint emrSize = 0x00000064;
  local uint bmiSize = 0x00000028;
  local uint emrOffset = FTell();
  FSeek(emrOffset);

  DWORD iType = { 0x0000004c };
  DWORD	nSize = { emrSize };
  RECTL rclBounds;
  DWORD xDest;
  DWORD yDest;
  DWORD cxDest;
  DWORD cyDest;
  DWORD BitBltRasterOperation = { 0x00CC0020 };
  DWORD xSrc;
  DWORD ySrc;
  XFORM xformSrc;
  DWORD BkColorSrc;
  DWORD iUsageSrc;
  DWORD offBmiSrc = { emrSize };
  DWORD cbBmiSrc = { bmiSize };
  DWORD offBitsSrc = { 0x0000008C };
  DWORD cbBitsSrc;
  BITMAPINFO bmi;

  // Fix nSize member of EMR_BITBLT structure.
  local uint end = FTell();
  FSeek(emrOffset+4);
  DWORD	nSize = { SetSize(emrSize, bmiSize, bmi.bmiHeader.biBitCount, bmi.bmiHeader.biCompression) };
  FSeek(end);

} EMRBITBLT;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/0dd551f3-80f7-4852-89c2-9ddba803a192
typedef struct tagEMRSTRETCHBLT {
  local uint emrSize = 0x0000006c;
  local uint bmiSize = 0x00000028;
  local uint emrOffset = FTell();
  FSeek(emrOffset);

  DWORD iType = { 0x0000004d };
  DWORD nSize = { emrSize };
  RECTL rclBounds;
  LONG xDest;
  LONG yDest;
  LONG cxDest;
  LONG cyDest;
  DWORD dwRop;
  LONG xSrc;
  LONG ySrc;
  XFORM xformSrc;
  COLORREF crBkColorSrc;
  DWORD iUsageSrc;
  DWORD offBmiSrc = { emrSize };
  DWORD cbBmiSrc;
  DWORD offBitsSrc;
  DWORD cbBitsSrc;
  LONG cxSrc;
  LONG cySrc;
  BITMAPINFO bmi;

  // Fix nSize member of EMR_STRETCHBLT structure.
  local uint end = FTell();
  FSeek(emrOffset+4);
  DWORD	nSize = { SetSize(emrSize, bmiSize, bmi.bmiHeader.biBitCount, bmi.bmiHeader.biCompression) };
  FSeek(end);

} EMRSTRETCHBLT;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/e6f715c0-d034-4eb3-952e-f8ee66adb9ed
typedef struct tagEMRMASKBLT {
  local uint emrSize = 0x00000080;
  local uint bmiSize = 0x00000028;
  local uint emrOffset = FTell();
  FSeek(emrOffset);

  DWORD iType = { 0x0000004e };
  DWORD nSize = { emrSize };
  RECTL rclBounds;
  LONG xDest;
  LONG yDest;
  LONG cxDest;
  LONG cyDest;
  DWORD dwRop;
  LONG xSrc;
  LONG ySrc;
  XFORM xformSrc;
  COLORREF crBkColorSrc;
  DWORD iUsageSrc;
  DWORD offBmiSrc = { emrSize };
  DWORD cbBmiSrc;
  DWORD offBitsSrc;
  DWORD cbBitsSrc;
  LONG xMask;
  LONG yMask;
  DWORD iUsageMask;
  DWORD offBmiMask;
  DWORD cbBmiMask;
  DWORD offBitsMask;
  DWORD cbBitsMask;
  BITMAPINFO bmi;

  // Fix nSize member of EMR_MASKBLT structure.
  local uint end = FTell();
  FSeek(emrOffset+4);
  DWORD	nSize = { SetSize(emrSize, bmiSize, bmi.bmiHeader.biBitCount, bmi.bmiHeader.biCompression) };
  FSeek(end);

} EMRMASKBLT;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/b6c8b39d-42c7-4221-ab70-93f1e09b644e
typedef struct tagEMRPLGBLT {
  local uint emrSize = 0x0000008c;
  local uint bmiSize = 0x00000028;
  local uint emrOffset = FTell();
  FSeek(emrOffset);

  DWORD iType = { 0x0000004f };
  DWORD nSize = { emrSize };
  RECTL rclBounds;
  POINT aptlDest[3];
  LONG xSrc;
  LONG ySrc;
  LONG cxSrc;
  LONG cySrc;
  XFORM xformSrc;
  COLORREF crBkColorSrc;
  DWORD iUsageSrc;
  DWORD offBmiSrc = { emrSize };
  DWORD cbBmiSrc;
  DWORD offBitsSrc;
  DWORD cbBitsSrc;
  LONG xMask;
  LONG yMask;
  DWORD iUsageMask;
  DWORD offBmiMask;
  DWORD cbBmiMask;
  DWORD offBitsMask;
  DWORD cbBitsMask;
  BITMAPINFO bmi;

  // Fix nSize member of EMR_PLGBLT structure.
  local uint end = FTell();
  FSeek(emrOffset+4);
  DWORD	nSize = { SetSize(emrSize, bmiSize, bmi.bmiHeader.biBitCount, bmi.bmiHeader.biCompression) };
  FSeek(end);

} EMRPLGBLT;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/e8816cc6-35d2-43e6-8d88-d69cd342372e
typedef struct tagEMRSETDIBITSTODEVICE {
  local uint emrSize = 0x0000004c;
  local uint bmiSize = 0x00000028;
  local uint emrOffset = FTell();
  FSeek(emrOffset);

  DWORD iType = { 0x00000050 };
  DWORD nSize = { emrSize };
  RECTL rclBounds;
  DWORD xDest;
  DWORD yDest;
  DWORD xSrc;
  DWORD ySrc;
  DWORD cxSrc;
  DWORD cySrc;
  DWORD offBmiSrc = { emrSize };
  DWORD cbBmiSrc;
  DWORD offBitsSrc;
  DWORD cbBitsSrc;
  DWORD iUsageSrc;
  DWORD iStartScan;
  DWORD cScans;
  BITMAPINFO bmi;

  // Fix nSize member of EMR_SETDIBITSTODEVICE structure.
  local uint end = FTell();
  FSeek(emrOffset+4);
  DWORD	nSize = { SetSize(emrSize, bmiSize, bmi.bmiHeader.biBitCount, bmi.bmiHeader.biCompression) };
  FSeek(end);

} EMRSETDIBITSTODEVICE;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/34e07d4f-aee6-4b63-a4bb-96996ad47669
typedef struct tagEMRALPHABLEND {
  local uint emrSize = 0x0000006c;
  local uint bmiSize = 0x00000028;
  local uint emrOffset = FTell();
  FSeek(emrOffset);

  DWORD iType = { 0x00000072 };
  DWORD nSize = { emrSize };
  RECTL rclBounds;
  LONG xDest;
  LONG yDest;
  LONG cxDest;
  LONG cyDest;
  BLENDFUNCTION dwRop;
  LONG xSrc;
  LONG ySrc;
  XFORM xformSrc;
  COLORREF crBkColorSrc;
  DWORD iUsageSrc;
  DWORD offBmiSrc = { emrSize };
  DWORD cbBmiSrc;
  DWORD offBitsSrc;
  DWORD cbBitsSrc;
  LONG cxSrc;
  LONG cySrc;
  BITMAPINFO bmi;

  // Fix nSize member of EMR_ALPHABLEND structure.
  local uint end = FTell();
  FSeek(emrOffset+4);
  DWORD	nSize = { SetSize(emrSize, bmiSize, bmi.bmiHeader.biBitCount, bmi.bmiHeader.biCompression) };
  FSeek(end);

} EMRALPHABLEND;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/aa216051-2dc0-4317-b343-525431cfa103
typedef struct tagEMRTRANSPARENTBLT {
  local uint emrSize = 0x0000006c;
  local uint bmiSize = 0x00000028;
  local uint emrOffset = FTell();
  FSeek(emrOffset);

  DWORD iType = { 0x00000074 };
  DWORD nSize = { emrSize };
  RECTL rclBounds;
  LONG xDest;
  LONG yDest;
  LONG cxDest;
  LONG cyDest;
  DWORD dwRop;
  LONG xSrc;
  LONG ySrc;
  XFORM xformSrc;
  COLORREF crBkColorSrc;
  DWORD iUsageSrc;
  DWORD offBmiSrc = { emrSize };
  DWORD cbBmiSrc;
  DWORD offBitsSrc;
  DWORD cbBitsSrc;
  LONG cxSrc;
  LONG cySrc;
  BITMAPINFO bmi;

  // Fix nSize member of EMR_TRANSPARENTBLT structure.
  local uint end = FTell();
  FSeek(emrOffset+4);
  DWORD	nSize = { SetSize(emrSize, bmiSize, bmi.bmiHeader.biBitCount, bmi.bmiHeader.biCompression) };
  FSeek(end);

} EMRTRANSPARENTBLT;


//------------------------------------------------
// 2. Clipping Record Types
//------------------------------------------------

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/a521411e-b877-4199-abb6-b4514b3574f8
typedef struct tagEMREXCLUDECLIPRECT {
  DWORD iType = { 0x0000001d };
  DWORD nSize = { 0x00000018 };
  RECTL rclClip;
} EMREXCLUDECLIPRECT;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/5ca68a15-1811-45b6-a51b-5e40d1055ccc
typedef struct tagREGIONDATAHEADER {
  DWORD nSize = { 0x00000020 };
  DWORD iType = { 0x00000001 };
  DWORD cntRects = { 0x00000001 };
  DWORD rgnSize;
  RECTL rgnBounds;
} REGIONDATAHEADER;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/5ca68a15-1811-45b6-a51b-5e40d1055ccc
typedef struct tagREGIONDATA {
  REGIONDATAHEADER rgnDataHeader;
  RECTL data[rgnDataHeader.cntRects];
} REGIONDATA;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/c6b9f4e6-27f6-4a4d-a383-c2daf5da11d9
typedef struct tagEMREXTSELECTCLIPRGN {
  DWORD iType = { 0x0000004b };
  DWORD nSize = { 0x00000014 };
  DWORD rgnDataSize = { 0x00000001 };
  DWORD rgnMode;
  REGIONDATA rgnData[rgnDataSize];
} EMREXTSELECTCLIPRGN;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/13cd0c98-d4e9-4ca7-a79d-58055bf45c79
typedef struct tagEMRINTERSECTCLIPRECT {
  DWORD iType = { 0x0000001e };
  DWORD nSize = { 0x00000014 };
  RECTL rclClip;
} EMRINTERSECTCLIPRECT;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/8bf2b60d-3b19-4bd1-b2d7-c89b027ad808
typedef struct tagEMROFFSETCLIPRGN {
  DWORD iType = { 0x0000001a };
  DWORD nSize = { 0x00000010 };
  POINT offset;
} EMROFFSETCLIPRGN;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/4a26bcf8-6607-4a09-8ec3-a8768eadc8e8
typedef struct tagEMRSELECTCLIPPATH {
  DWORD iType = { 0x00000043 };
  DWORD nSize = { 0x00000010 };
  POINT offset;
} EMRSELECTCLIPPATH;


//------------------------------------------------
// 3. Comment Record Types
//------------------------------------------------

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/4a26bcf8-6607-4a09-8ec3-a8768eadc8e8
typedef struct tagEMRCOMMENT {
  DWORD iType = { 0x00000046 };
  DWORD nSize = { 0x0000000c };
  DWORD dataSize <max=3>;
  BYTE privateData[dataSize];
} EMRCOMMENT;

//------------------------------------------------
// 5. Drawing Record Types
//------------------------------------------------

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/3b04a2e2-9ba5-477f-b79c-5710635d04b9
typedef struct tagEMRANGLEARC {
  DWORD iType = { 0x00000029 };
  DWORD	nSize = { 0x00000018 };
  POINT ptlCenter;
  DWORD nRadius;
  FLOAT eStartAngle;
  FLOAT eSweepAngle;
} EMRANGLEARC;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/3e148f19-7e75-43aa-9259-fda562f60315
typedef struct tagEMRARC {
  DWORD iType = { 0x0000002D };
  DWORD	nSize = { 0x00000028 };
  RECTL rclBox;
  POINT ptlStart;
  POINT ptlEnd;
} EMRARC;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/51b4a890-bfd4-496e-bbd9-dbde9ad49d1c
typedef struct tagEMRARCTO {
  DWORD iType = { 0x00000037 };
  DWORD	nSize = { 0x00000028 };
  RECTL rclBox;
  POINT ptlStart;
  POINT ptlEnd;
} EMRARCTO;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/51b4a890-bfd4-496e-bbd9-dbde9ad49d1c
typedef struct tagEMRCHORD {
  DWORD iType = { 0x0000002e };
  DWORD	nSize = { 0x00000028 };
  RECTL rclBox;
  POINT ptlStart;
  POINT ptlEnd;
} EMRCHORD;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/d9462a32-d188-40e7-bf72-05614ec4ff18
typedef struct tagEMRELLIPSE {
  DWORD iType = { 0x0000002a };
  DWORD	nSize = { 0x00000018 };
  RECTL rclBox;
} EMRELLIPSE;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/4f1b52ba-325a-4da8-bd5b-987c4a572e5f
typedef struct tagEMREXTFLOODFILL {
  DWORD iType = { 0x00000035 };
  DWORD	nSize = { 0x00000018 };
  POINT ptlStart;
  COLORREF crColor;
  DWORD iMode;
} EMREXTFLOODFILL;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/dd585d0a-5d7c-4034-963a-1141af836972
typedef struct tagEMRTEXT {
  POINT ptlReference;
  DWORD nChars;
  DWORD offString;
  DWORD fOptions;
  RECTL rcl;
  DWORD offDx;
} EMRTEXT;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/6b582a71-3c29-4fc6-a0f4-1f8a313739a1
typedef struct tagEMREXTTEXTOUTA {
  DWORD iType = { 0x00000053 };
  DWORD	nSize = { 0x00000018 };
  RECTL rclBounds;
  DWORD iGraphicsMode;
  FLOAT exScale;
  FLOAT eyScale;
  EMRTEXT emrtext;
} EMREXTTEXTOUTA;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/7cc0afcb-0693-4810-a3cb-b69c871ce473
typedef struct tagEMRFILLPATH {
  DWORD iType = { 0x0000003e };
  DWORD	nSize = { 0x00000018 };
  RECTL rclBounds;
} EMRFILLPATH;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/a1bb0f88-bb22-4956-b45a-7005546561cc
typedef struct tagEMRFILLRGN {
  DWORD iType = { 0x00000047 };
  DWORD	nSize = { 0x00000020 };
  RECTL rclBounds;
  DWORD rgnDataSize = { 0x00000001 };
  DWORD ihBrush;
  REGIONDATA rgnData[rgnDataSize];
} EMRFILLRGN;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/c370fc16-9045-467b-a125-7239428df6b3
typedef struct tagEMRFRAMERGN {
  DWORD iType = { 0x00000048 };
  DWORD	nSize = { 0x00000020 };
  RECTL rclBounds;
  DWORD rgnDataSize = { 0x00000001 };
  DWORD ihBrush;
  DWORD width;
  DWORD height;
  REGIONDATA rgnData[rgnDataSize];
} EMRFRAMERGN;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/1a3849c8-be6c-4d30-b5d3-f43b4c70ca0d
typedef struct tagEMRGRADIENTFILL {
  DWORD iType = { 0x00000076 };
  DWORD	nSize = { 0x00000024 };
  RECTL rclBounds;
  DWORD nVer;
  DWORD nTri;
  ULONG ulMode;
  TRIVERTEX nVer[1];
  GRADIENT_RECT nTri[1];
} EMRGRADIENTFILL;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/9b3eccf9-4a55-4a9c-b0df-3c495e7b9a8c
typedef struct tagEMRLINETO {
  DWORD iType = { 0x00000036 };
  DWORD	nSize = { 0x00000010 };
  POINT ptl;
} EMRLINETO;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/68c457dc-6df3-4609-b6f9-e28e5ca4d9c1
typedef struct tagEMRPAINTRGN {
  DWORD iType = { 0x0000004a };
  DWORD	nSize = { 0x00000010 };
  RECTL rclBounds;
  DWORD rgnDataSize = { 0x00000001 };
  REGIONDATA rgnData[rgnDataSize];
} EMRPAINTRGN;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/c326f6b2-ae7e-447f-b8dc-02c703f054c3
typedef struct tagEMRPIE {
  DWORD iType = { 0x0000002f };
  DWORD	nSize = { 0x00000028 };
  RECTL box;
  POINT start;
  POINT stop;
} EMRPIE;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/4e53793a-95af-49d4-ae1f-4c407eda9440
typedef struct tagEMRPOLYBEZIER {
  DWORD iType = { 0x00000002 };
  DWORD	nSize = { 0x00000028 };
  RECTL rclBounds;
  DWORD cntPoints = { 0x00000001 };
  POINT aPoints[cntPoints];
} EMRPOLYBEZIER;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/28431e45-a874-41dc-864d-8f4f69e8e831
typedef struct tagEMRPOLYBEZIERTO {
  DWORD iType = { 0x00000005 };
  DWORD	nSize = { 0x0000001c };
  RECTL rclBounds;
  DWORD cntPoints <max=4>;
  POINT aPoints[cntPoints];
} EMRPOLYBEZIERTO;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/95794faf-eed8-4d5b-b6ff-c6765a58166e
typedef struct tagEMRPOLYDRAW {
  DWORD iType = { 0x00000038 };
  DWORD	nSize = { 0x0000001c };
  RECTL rclBounds;
  DWORD cntPoints;
  POINT aPoints[cntPoints];
  BYTE abTypes[cntPoints];
} EMRPOLYDRAW;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/eb916781-58b6-4e92-b606-68071aa65733
typedef struct tagEMRPOLYGON {
  DWORD iType = { 0x00000003 };
  DWORD	nSize = { 0x0000001c };
  RECTL rclBounds;
  DWORD cntPoints;
  POINT aPoints[cntPoints];
} EMRPOLYGON;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/9ce6c9bb-1a13-48a5-9aa2-d95b334b5358
typedef struct tagEMRPOLYLINE {
  DWORD iType = { 0x00000004 };
  DWORD	nSize = { 0x0000001c };
  RECTL rclBounds;
  DWORD cntPoints <max=1>;
  POINT aPoints[cntPoints];
} EMRPOLYLINE;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/a2d8b738-8351-4a9c-9f3a-a6a8481c4c6f
typedef struct tagEMRPOLYLINETO {
  DWORD iType = { 0x00000006 };
  DWORD	nSize = { 0x0000001c };
  RECTL rclBounds;
  DWORD cntPoints <max=1>;
  POINT aPoints[cntPoints];
} EMRPOLYLINETO;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/c60ff127-2711-42d3-85d4-502ca2e4caef
typedef struct tagEMRPOLYPOLYGON {
  DWORD iType = { 0x00000008 };
  DWORD	nSize = { 0x0000001c };
  RECTL rclBounds;
  DWORD nPolys;
  DWORD cntPoints <max=1>;
  DWORD aPolyCounts[1];
  POINT aPoints[cntPoints];
} EMRPOLYPOLYGON;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/e23f75fd-3af6-49f3-8c86-ef121ff61701
typedef struct tagEMRPOLYPOLYLINE {
  DWORD iType = { 0x00000007 };
  DWORD	nSize = { 0x0000001c };
  RECTL rclBounds;
  DWORD nPolys;
  DWORD cntPoints <max=1>;
  DWORD aPolyCounts[1];
  POINT aPoints[cntPoints];
} EMRPOLYPOLYLINE;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/d8b7ac21-76b8-4f9a-a7cc-05f9d2d5627e
typedef struct tagEMRPOLYTEXTOUTA {
  DWORD iType = { 0x00000060 };
  DWORD	nSize = { 0x00000024 };
  RECTL rclBounds;
  DWORD iGraphicsMode;
  FLOAT exScale;
  FLOAT eyScale;
  LONG cStrings <max=1>;
  EMRTEXT aemrtext[cStrings];
} EMRPOLYTEXTOUTA;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/3c471238-0a02-4992-90a2-bfd2afd98f2a
typedef struct tagEMRRECTANGLE {
  DWORD iType = { 0x0000002b };
  DWORD	nSize = { 0x00000018 };
  RECTL rclBox;
} EMRRECTANGLE;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/2e4f55a1-5f69-4a81-8329-423eeedb3812
typedef struct tagEMRROUNDRECT {
  DWORD iType = { 0x0000002c };
  DWORD	nSize = { 0x00000020 };
  RECTL rclBox;
  SIZEL szlCorner;
} EMRROUNDRECT;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/21d44fb9-b3c7-4ce7-a402-7601f34d0cda
typedef struct tagEMRSETPIXELV {
  DWORD iType = { 0x0000000f };
  DWORD	nSize = { 0x00000014 };
  POINT ptlPixel;
  COLORREF crColor;
} EMRSETPIXELV;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/2794792a-38b4-4d19-adec-28fc2a6273b2
typedef struct tagEMRSTROKEANDFILLPATH {
  DWORD iType = { 0x0000003f };
  DWORD	nSize = { 0x00000018 };
  RECTL rclBounds;
} EMRSTROKEANDFILLPATH;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/c8b86df6-7464-45b0-bca4-6ffab9174961
typedef struct tagEMRSTROKEPATH {
  DWORD iType = { 0x00000040 };
  DWORD	nSize = { 0x00000018 };
  RECTL rclBounds;
} EMRSTROKEPATH;


//------------------------------------------------
// 6. Escape Record Types
//------------------------------------------------

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/86405bb1-cc2c-42bc-9e0f-28874f208d98
typedef struct tagEMRDRAWESCAPE {
  DWORD iType = { 0x00000069 };
  DWORD	nSize = { 0x00000014 };
  MetafileEscapes iEscape;
  DWORD cjln = { 0x00000004 };
  BYTE data[cjln];
} EMRDRAWESCAPE;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/a31ef1e7-54ba-41ae-b79d-e6fd102dc6b1
typedef struct tagEMREXTESCAPE {
  DWORD iType = { 0x0000006a };
  DWORD	nSize = { 0x00000014 };
  MetafileEscapes iEscape;
  DWORD cjln = { 0x00000004 };
  BYTE data[cjln];
} EMREXTESCAPE;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/86405bb1-cc2c-42bc-9e0f-28874f208d98
typedef struct tagEMRNAMEDESCAPE {
  DWORD iType = { 0x0000006e };
  DWORD	nSize = { 0x00000018 };
  MetafileEscapes iEscape;
  DWORD cjDriver;
  DWORD cjln = { 0x00000004 };
  WORD driverName = { 0xFF00 };
  BYTE data[cjln];
} EMRNAMEDESCAPE;


//------------------------------------------------
// 7. Object Creation Record Types
//------------------------------------------------

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/b9a8ef5d-0089-4e42-b317-e6ebc0ff098f
typedef struct tagEMRCREATEBRUSHINDIRECT {
  DWORD iType = { 0x00000027 };
  DWORD	nSize = { 0x00000018 };
  DWORD ihBrush;
  LogBrushEx LogBrush;
} EMRCREATEBRUSHINDIRECT;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/954af0ff-a8d7-4d34-80ed-89f570bac016
typedef struct tagEMRCREATECOLORSPACE {
  DWORD iType = { 0x00000063 };
  DWORD	ihCS = { 0x00000018 };
  DWORD ics;
  LOGCOLORSPACEA lcs;
} EMRCREATECOLORSPACE;

/*
// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/d1cd2147-7fb6-4d97-8f7e-a289006b6064
typedef struct tagEMRCREATECOLORSPACEW {
  DWORD iType = { 0x0000007A };
  DWORD	nSize = { 0x00000018 };
  DWORD ihCS;
  LOGCOLORSPACEW lcs;
  DWORD dwFlags;
  DWORD cbData;
  BYTE Data[1];
} EMRCREATECOLORSPACEW;
*/

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/332116b4-c6f9-4b18-a7cc-22c531b52afc
typedef struct tagEMRCREATEDIBPATTERNBRUSHPT {
  local uint emrSize = 0x00000020;
  local uint bmiSize = 0x00000028;
  local uint emrOffset = FTell();
  FSeek(emrOffset);

  DWORD iType = { 0x0000005e };
  DWORD	nSize = { emrSize };
  DWORD ihBrush;
  DWORD iUsage;
  DWORD offBmi;
  DWORD cbBmi;
  DWORD offBits;
  DWORD cbBits;
  BITMAPINFO bmi;

  // Fix nSize member of EMR_CREATEDIBPATTERNBRUSHPT structure.
  local uint end = FTell();
  FSeek(emrOffset+4);
  DWORD	nSize = { SetSize(emrSize, bmiSize, bmi.bmiHeader.biBitCount, bmi.bmiHeader.biCompression) };
  FSeek(end);

} EMRCREATEDIBPATTERNBRUSHPT;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/49b42277-31b0-4eb9-a6af-86d9be9b568f
typedef struct tagEMRCREATEMONOBRUSH {
  local uint emrSize = 0x00000020;
  local uint bmiSize = 0x00000028;
  local uint emrOffset = FTell();
  FSeek(emrOffset);

  DWORD iType = { 0x0000005d };
  DWORD	nSize = { emrSize };
  DWORD ihBrush;
  DWORD iUsage;
  DWORD offBmi;
  DWORD cbBmi;
  DWORD offBits;
  DWORD cbBits;
  BITMAPINFO bmi;

  // Fix nSize member of EMR_CREATEDIBPATTERNBRUSHPT structure.
  local uint end = FTell();
  FSeek(emrOffset+4);
  DWORD	nSize = { SetSize(emrSize, bmiSize, bmi.bmiHeader.biBitCount, bmi.bmiHeader.biCompression) };
  FSeek(end);

} EMRCREATEMONOBRUSH;

// https://docs.microsoft.com/en-us/windows/win32/api/wingdi/ns-wingdi-logpalette
typedef struct tagLOGPALETTE {
  WORD palVersion;
  WORD palNumEntries;
  PALETTEENTRY palPalEntry[1];
} LOGPALETTE;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/07e1492b-e4bb-4394-934f-4eaee67ab8ff
typedef struct tagEMRCREATEPALETTE {
  DWORD iType = { 0x00000031 };
  DWORD	nSize = { 0x00000014 };
  DWORD ihPal;
  LOGPALETTE lgpl;
} EMRCREATEPALETTE;

// https://docs.microsoft.com/en-us/windows/win32/api/wingdi/ns-wingdi-logpen
typedef struct tagLOGPEN {
  UINT lopnStyle;
  POINT lopnWidth;
  COLORREF lopnColor;
} LOGPEN;

// https://docs.microsoft.com/en-us/windows/win32/api/wingdi/ns-wingdi-emrcreatepen
typedef struct tagEMRCREATEPEN {
  DWORD iType = { 0x00000026 };
  DWORD	nSize = { 0x0000001c };
  DWORD ihPen;
  LOGPEN lopn;
} EMRCREATEPEN;

typedef struct tagLOGFONTA {
  LONG lfHeight;
  LONG lfWidth;
  LONG lfEscapement;
  LONG lfOrientation;
  LONG lfWeight;
  BYTE lfItalic;
  BYTE lfUnderline;
  BYTE lfStrikeOut;
  BYTE lfCharSet;
  BYTE lfOutPrecision;
  BYTE lfClipPrecision;
  BYTE lfQuality;
  BYTE lfPitchAndFamily;
  CHAR lfFaceName[32];
} LOGFONTA;

/*
// https://docs.microsoft.com/en-us/windows/win32/api/wingdi/ns-wingdi-extlogfontw
typedef struct tagEXTLOGFONTW {
  LOGFONTW elfLogFont;
  WCHAR    elfFullName[64];
  WCHAR    elfStyle[32];
  DWORD    elfVersion;
  DWORD    elfStyleSize;
  DWORD    elfMatch;
  DWORD    elfReserved;
  BYTE     elfVendorId[4];
  DWORD    elfCulture;
  PANOSE   elfPanose;
} EXTLOGFONTW;

typedef struct tagEMREXTCREATEFONTINDIRECTW {
  DWORD iType = { 0x00000051 };
  DWORD	nSize = { emrSize };
  DWORD ihFont;
  EXTLOGFONTW elfw;
} EMREXTCREATEFONTINDIRECTW;
*/

typedef struct tagLOGPENEX {
  DWORD PenStyle;
  DWORD Width;
  BrushStyle lbStyle;
  COLORREF lbColor;
  DWORD lbHatch;
  DWORD NumStyleEntries;
  DWORD StyleEntry[NumStyleEntries];
} LOGPENEX;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/d7f51e05-4024-497c-ad4a-8aeca9d34256
typedef struct tagEMREXTCREATEPEN {
  local uint emrSize = 0x00000074;
  local uint bmiSize = 0x00000028;
  local uint emrOffset = FTell();
  FSeek(emrOffset);

  DWORD iType = { 0x0000005F };
  DWORD	nSize = { emrSize };
  DWORD ihPen;
  DWORD offBmi = { emrSize };
  DWORD cbBmi;
  DWORD offBits;
  DWORD cbBits;
  LOGPENEX elp;
  BITMAPINFO bmi;

  // Fix nSize member of EMR_EXTCREATEPEN structure.
  local uint end = FTell();
  FSeek(emrOffset+4);
  DWORD	nSize = { SetSize(emrSize, bmiSize, bmi.bmiHeader.biBitCount, bmi.bmiHeader.biCompression) };
  FSeek(end);

} EMREXTCREATEPEN;


//------------------------------------------------
// 8. Object Manipulation Record Types
//------------------------------------------------

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/99de1bfb-3d77-455b-8679-7386903e1472
typedef struct tagCOLORCORRECTPALETTE {
  DWORD iType = { 0x0000006f };
  DWORD	nSize = { 0x00000018 };
  DWORD ihPalette;
  DWORD nFirstEntry;
  DWORD nPalEntries;
  DWORD nReserved;
} EMRCOLORCORRECTPALETTE;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/5d137387-d79a-4bc8-9a4d-38291320e148
typedef struct tagEMRDELETECOLORSPACE {
  DWORD iType = { 0x00000065 };
  DWORD	nSize = { 0x0000000c };
  DWORD ihCS;
} EMRDELETECOLORSPACE;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/6f0f12a3-111a-478b-8251-a9505168f9a9
typedef struct tagEMRDELETEOBJECT {
  DWORD iType = { 0x00000028 };
  DWORD	nSize = { 0x0000000c };
  DWORD ihCS;
} EMRDELETEOBJECT;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/ec789332-96b5-4bb8-9d7c-8b5c8c0da8b9
typedef struct tagEMRRESIZEPALETTE {
  DWORD iType = { 0x00000033 };
  DWORD	nSize = { 0x00000010 };
  DWORD ihPal;
  DWORD NumberOfEntries;
} EMRRESIZEPALETTE;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/145b063d-5f96-41fe-b7ae-1e615b2bc2bf
typedef struct {
  DWORD iType = { 0x00000025 };
  DWORD	nSize = { 0x0000000c };
  DWORD ihObject <min=1>;
} EMRSELECTOBJECT;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/e6a4ce2a-209d-43df-b763-5d8e54c21a10
typedef struct tagEMRSELECTPALETTE {
  DWORD iType = { 0x00000030 };
  DWORD	nSize = { 0x0000000c };
  DWORD ihPal;
} EMRSELECTPALETTE;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/2a84d7a5-f8c1-4dd2-ae79-a029a25ad601
typedef struct tagEMRSETCOLORSPACE {
  DWORD iType = { 0x00000064 };
  DWORD	nSize = { 0x0000000c };
  DWORD ihCS;
} EMRSETCOLORSPACE;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/88348296-3c9a-488f-bbf7-19c897535372
typedef struct tagEMRSETPALETTEENTRIES {
  DWORD iType = { 0x00000032 };
  DWORD	nSize = { 0x00000014 };
  DWORD ihPal;
  DWORD iStart;
  DWORD cEntries <max=1>;
  PALETTEENTRY aPalEntries[cEntries];
} EMRSETPALETTEENTRIES;


//------------------------------------------------
// 9. OpenGL Record Types
//------------------------------------------------

// https://docs.microsoft.com/en-us/windows/win32/api/wingdi/ns-wingdi-emrglsrecord
typedef struct tagEMRGLSRECORD {
  DWORD iType = { 0x00000066 };
  DWORD	nSize = { 0x00000010 };
  DWORD cbData = { 0x0000004 };
  BYTE  Data[cbData];
} EMRGLSRECORD;

// https://docs.microsoft.com/en-us/windows/win32/api/wingdi/ns-wingdi-emrglsboundedrecord
typedef struct tagEMRGLSBOUNDEDRECORD {
  DWORD iType = { 0x00000067 };
  DWORD	nSize = { 0x00000020 };
  RECTL rclBounds;
  DWORD cbData = { 0x0000004 };
  BYTE  Data[cbData];
} EMRGLSBOUNDEDRECORD;


//------------------------------------------------
// 10. Path Bracket Record Types
//------------------------------------------------

typedef struct tagEMRBEGINPATH {
  DWORD iType = { 0x0000003b };
  DWORD	nSize = { 0x00000008 };
} EMRBEGINPATH;

typedef struct tagEMRENDPATH {
  DWORD iType = { 0x0000003c };
  DWORD	nSize = { 0x00000008 };
} EMRENDPATH;

typedef struct tagEMRCLOSEFIGURE {
  DWORD iType = { 0x0000003d };
  DWORD	nSize = { 0x00000008 };
} EMRCLOSEFIGURE;

typedef struct tagEMRFLATTENPATH {
  DWORD iType = { 0x00000041 };
  DWORD	nSize = { 0x00000008 };
} EMRFLATTENPATH;

typedef struct tagEMRWIDENPATH {
  DWORD iType = { 0x00000042 };
  DWORD	nSize = { 0x00000008 };
} EMRWIDENPATH;

typedef struct tagEMRABORTPATH {
  DWORD iType = { 0x00000042 };
  DWORD	nSize = { 0x00000008 };
} EMRABORTPATH;


//------------------------------------------------
// 13. Reserved Record Types
//------------------------------------------------

typedef struct tagEMRRESERVED107 {
  DWORD iType = { 0x0000006b };
  DWORD	nSize = { 0x00000028 };
  DWORD ReservedData[8];
} EMRRESERVED107;

typedef struct tagEMRRESERVED117 {
  DWORD iType = { 0x00000075 };
  DWORD	nSize = { 0x00000028 };
  DWORD ReservedData[8];
} EMRRESERVED117;

//------------------------------------------------

//------------------------------------------------

LittleEndian();

// Add EMF_HEADER record.
EMRHEADER EmfHeader;

// Fix the nSize member of the EMF_HEADER record.
FSeek(4);
local uint EmfHeaderSize = 0x6c + (EmfHeader.nDescription * 0x2);
EmfHeader.nSize = EmfHeaderSize;
DWORD nSize = { EmfHeaderSize };

// Check for EMF signature.
if (EmfHeader.dSignature != 0x464D4520) {
  Warning( "File is not an enhanced metafile. Template stopped." );
  return -1;
}

// Check description size.
if (EmfHeader.nDescription % 4 != 0) { // The total size of the record must be a multiple of 4 bytes.
  Warning( "Description size is invalid. Template stopped." );
  return -1;
}

// Add description record.
FSeek(EmfHeader.offDescription);
EMRDESCRIPTION EmfDescription;

// Add EmfPlusHeader record (after EMR_HEADER).
FSeek(EmfHeader.nSize);
EMFPLUSHEADER EmfPlusHeader;

// Start of additonal records (after EmfPlusHeader).
FSeek(EmfHeader.nSize + 0x2c);
//Warning( "0x%x", EmfHeader.nSize + EmfPlusHeader.cSize );

// Add EMF+ records.
local uint recCnt = 0;
for (recCnt = 0; recCnt < EmfHeader.nRecords - 4; recCnt++) {
  local UBYTE possible[] = { 0x9, 0xa, 0xd, 0x3a, 0x36, 0x38 };
  //local UBYTE possible[] = { 0x36, 0xd };
  UBYTE recType <values=possible>;
  FSkip(-1);

  if (recType == 0x9) {
    EmfPlusClear Clear;

  } else if (recType == 0xa) {
    EmfPlusFillRects FillRects;

  } else if (recType == 0xd) {
    EmfPlusDrawLines DrawLines;

  } else if (recType == 0x3a) {
    EmfPlusSetTSClip SetTSClip;

  } else if (recType == 0x36) {
    EmfPlusDrawDriverString DrawDriverString;

  } else if (recType == 0x38) {
    EmfPlusSerializableObject SerializableObject;
  }

}

// Close EMF+ records.
EMFPLUSEOF EmfPlusEndOfFile;

// Close EMF records.
EMREOF EmfEndOfFile;

// Fix nBytes member of the EMR_HEADER record.
local DWORD file_size = FTell();
FSeek(0x30);
DWORD nBytes = { file_size };

// Check file size.
if (file_size % 4 != 0) { // The total size of the record must be a multiple of 4 bytes.
  Warning( "File size is invalid. Template stopped." );
  return -1;
}
